<program> = {TK_MAIN, TK_FUNID}
<mainFunction> = {TK_MAIN}
<otherFunctions> = {TK_FUNID, ∈}
<function> = {TK_FUNID}
<input_par> = {TK_INPUT}
<output_par> = {TK_OUTPUT, ∈}
<parameter_list> = {TK_RUID, TK_RECORD, TK_INT, TK_UNION, TK_REAL}
<dataType> = {TK_RUID, TK_RECORD, TK_UNION, TK_INT, TK_REAL}
<primitiveDatatype> = {TK_INT, TK_REAL}
<constructedDatatype> = {TK_RECORD, TK_RUID, TK_UNION}
<remaining_list> = {∈, TK_COMMA}
<stmts> = {TK_RETURN, TK_WRITE, TK_ID, TK_CALL, TK_SQL, TK_RECORD, TK_READ, TK_IF, TK_UNION, TK_WHILE, TK_DEFINETYPE, TK_TYPE}
<typeDefinitions> = {TK_RECORD, TK_DEFINETYPE, TK_UNION, ∈}
<definitionOrTypedef> = {TK_UNION, TK_RECORD, TK_DEFINETYPE}
<typeDefinition> = {TK_UNION, TK_RECORD}
<fieldDefinitions> = {TK_TYPE}
<fieldDefinition> = {TK_TYPE}
<moreFields> = {TK_TYPE, ∈}
<declarations> = {∈, TK_TYPE}
<declaration> = {TK_TYPE}
<global_or_not> = {∈, TK_COLON}
<otherStmts> = {TK_WRITE, TK_ID, TK_SQL, TK_CALL, ∈, TK_IF, TK_WHILE, TK_READ}
<stmt> = {TK_IF, TK_CALL, TK_SQL, TK_READ, TK_WHILE, TK_WRITE, TK_ID}
<assignmentStmt> = {TK_ID}
<singleOrRecId> = {TK_ID}
<ifRecField> = {TK_DOT, ∈}
<funCallStmt> = {TK_CALL, TK_SQL}
<outputParameters> = {TK_SQL, ∈}
<inputParameters> = {TK_SQL}
<iterativeStmt> = {TK_WHILE}
<conditionalStmt> = {TK_IF}
<handle_else> = {TK_ELSE, TK_ENDIF}
<ioStmt> = {TK_READ, TK_WRITE}
<arithmeticExpression> = {TK_OP, TK_RNUM, TK_ID, TK_NUM}
<expression'> = {TK_MINUS, ∈, TK_PLUS}
<term> = {TK_OP, TK_RNUM, TK_NUM, TK_ID}
<term'> = {∈, TK_MUL, TK_DIV}
<factor> = {TK_RNUM, TK_OP, TK_ID, TK_NUM}
<sum_operators> = {TK_PLUS, TK_MINUS}
<mult_operators> = {TK_MUL, TK_DIV}
<booleanExpression> = {TK_NUM, TK_OP, TK_RNUM, TK_NOT, TK_ID}
<var> = {TK_ID, TK_RNUM, TK_NUM}
<logicalOp> = {TK_AND, TK_OR}
<relationalOp> = {TK_EQ, TK_LT, TK_NE, TK_GE, TK_GT, TK_LE}
<returnStmt> = {TK_RETURN}
<optionalReturn> = {TK_SQL, ∈}
<idList> = {TK_ID}
<more_ids> = {TK_COMMA, ∈}
<definetypestmt> = {TK_DEFINETYPE}
<A> = {TK_RECORD, TK_UNION}

<program> = {$}
<mainFunction> = {$}
<otherFunctions> = {TK_MAIN}
<function> = {TK_FUNID, TK_MAIN}
<input_par> = {TK_OUTPUT, TK_SEM}
<output_par> = {TK_SEM}
<parameter_list> = {TK_SQR}
<dataType> = {TK_COLON, TK_ID}
<primitiveDatatype> = {TK_ID, TK_COLON}
<constructedDatatype> = {TK_ID, TK_COLON}
<remaining_list> = {TK_SQR}
<stmts> = {TK_END}
<typeDefinitions> = {TK_WRITE, TK_ID, TK_WHILE, TK_CALL, TK_RETURN, TK_SQL, TK_IF, TK_READ, TK_TYPE}
<definitionOrTypedef> = {TK_SQL, TK_UNION, TK_ID, TK_TYPE, TK_WRITE, TK_RECORD, TK_WHILE, TK_CALL, TK_IF, TK_READ, TK_DEFINETYPE, TK_RETURN}
<typeDefinition> = {TK_RECORD, TK_READ, TK_SQL, TK_TYPE, TK_DEFINETYPE, TK_UNION, TK_WHILE, TK_IF, TK_RETURN, TK_ID, TK_CALL, TK_WRITE}
<fieldDefinitions> = {TK_ENDUNION, TK_ENDRECORD}
<fieldDefinition> = {TK_TYPE, TK_ENDRECORD, TK_ENDUNION}
<moreFields> = {TK_ENDRECORD, TK_ENDUNION}
<declarations> = {TK_RETURN, TK_READ, TK_IF, TK_ID, TK_WHILE, TK_CALL, TK_SQL, TK_WRITE}
<declaration> = {TK_RETURN, TK_SQL, TK_TYPE, TK_WRITE, TK_ID, TK_IF, TK_WHILE, TK_READ, TK_CALL}
<global_or_not> = {TK_SEM}
<otherStmts> = {TK_ENDIF, TK_ELSE, TK_RETURN, TK_ENDWHILE}
<stmt> = {TK_CALL, TK_WRITE, TK_ELSE, TK_RETURN, TK_WHILE, TK_ENDWHILE, TK_ID, TK_ENDIF, TK_IF, TK_SQL, TK_READ}
<assignmentStmt> = {TK_IF, TK_ID, TK_ENDIF, TK_CALL, TK_READ, TK_SQL, TK_WHILE, TK_ENDWHILE, TK_ELSE, TK_RETURN, TK_WRITE}
<singleOrRecId> = {TK_EQ, TK_ASSIGNOP, TK_GE, TK_LE, TK_LT, TK_NE, TK_MINUS, TK_SEM, TK_PLUS, TK_DIV, TK_CL, TK_GT, TK_MUL}
<ifRecField> = {TK_LE, TK_MINUS, TK_NE, TK_CL, TK_GT, TK_GE, TK_PLUS, TK_LT, TK_ASSIGNOP, TK_SEM, TK_DIV, TK_EQ, TK_MUL}
<funCallStmt> = {TK_READ, TK_ID, TK_WHILE, TK_SQL, TK_ENDWHILE, TK_CALL, TK_WRITE, TK_ELSE, TK_IF, TK_ENDIF, TK_RETURN}
<outputParameters> = {TK_CALL}
<inputParameters> = {TK_SEM}
<iterativeStmt> = {TK_ENDIF, TK_ENDWHILE, TK_ELSE, TK_READ, TK_WRITE, TK_CALL, TK_IF, TK_WHILE, TK_RETURN, TK_SQL, TK_ID}
<conditionalStmt> = {TK_ENDWHILE, TK_CALL, TK_READ, TK_RETURN, TK_WHILE, TK_ENDIF, TK_SQL, TK_ID, TK_WRITE, TK_IF, TK_ELSE}
<handle_else> = {TK_IF, TK_CALL, TK_WRITE, TK_RETURN, TK_ID, TK_ENDWHILE, TK_ENDIF, TK_ELSE, TK_READ, TK_WHILE, TK_SQL}
<ioStmt> = {TK_ELSE, TK_SQL, TK_ENDIF, TK_WRITE, TK_IF, TK_RETURN, TK_READ, TK_CALL, TK_WHILE, TK_ENDWHILE, TK_ID}
<arithmeticExpression> = {TK_SEM, TK_CL}
<expression'> = {TK_SEM, TK_CL}
<term> = {TK_CL, TK_SEM, TK_MINUS, TK_PLUS}
<term'> = {TK_CL, TK_MINUS, TK_SEM, TK_PLUS}
<factor> = {TK_DIV, TK_CL, TK_PLUS, TK_MUL, TK_MINUS, TK_SEM}
<sum_operators> = {TK_NUM, TK_OP, TK_RNUM, TK_ID}
<mult_operators> = {TK_NUM, TK_OP, TK_ID, TK_RNUM}
<booleanExpression> = {TK_CL}
<var> = {TK_EQ, TK_LE, TK_PLUS, TK_LT, TK_NE, TK_MUL, TK_SEM, TK_DIV, TK_MINUS, TK_CL, TK_GE, TK_GT}
<logicalOp> = {TK_OP}
<relationalOp> = {TK_NUM, TK_ID, TK_RNUM}
<returnStmt> = {TK_END}
<optionalReturn> = {TK_SEM}
<idList> = {TK_SQR}
<more_ids> = {TK_SQR}
<definetypestmt> = {TK_CALL, TK_SQL, TK_READ, TK_RECORD, TK_RETURN, TK_WRITE, TK_UNION, TK_DEFINETYPE, TK_ID, TK_TYPE, TK_IF, TK_WHILE}
<A> = {TK_RUID}
